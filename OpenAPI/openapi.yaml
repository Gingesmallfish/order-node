openapi: 3.0.0
servers:
  - url: http://localhost:3000 # 开发环境
    description: 本地开发环境
info:
  title: 校园接单平台接口文档
  version: 1.0.0
  description: 校园接单平台接口文档

components:
  securitySchemes:
    bearerAuth: # 定义JWT认证方式（对应原注释中的security: bearerAuth）
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /users/register:
    post:
      tags: [ "用户管理" ]  # 统一为“用户管理”分组
      summary: 用户注册
      description: 创建新用户账户
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - email
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                role:
                    type: integer
      responses:
        '201':
          description: 用户创建成功
        '400':
          description: 请求参数错误

  /users/login:
    post:
      tags: [ "用户管理" ]  # 统一为“用户管理”分组
      summary: 用户登录
      description: 用户登录以获取访问令牌
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: 登录成功，返回访问令牌
        '401':
          description: 用户名或密码错误

  /users/me:
    get:
      tags: [ "用户管理" ]  # 统一为“用户管理”分组
      summary: 获取当前用户信息
      description: 获取已登录用户的详细信息
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: 返回用户信息
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
        '401':
          description: 未授权访问

  /users/logout:
    post:
      tags: [ "用户管理" ]  # 统一为“用户管理”分组
      summary: 用户退出
      description: 退出登录并清除会话
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: 成功登出
        '401':
          description: 未授权访问

  /users/refresh-token:
    post:
      tags: [ "用户管理" ]  # 统一为“用户管理”分组
      summary: 刷新访问令牌
      description: 使用刷新令牌获取新的访问令牌
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: 成功刷新令牌
        '401':
          description: 刷新令牌无效或过期

  /users/terms/latest:
    get:
      tags: [ "用户管理" ]  # 统一为“用户管理”分组
      summary: 获取最新用户协议
      description: 获取最新的用户服务协议内容
      responses:
        '200':
          description: 返回最新用户协议
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  content:
                    type: string
                  version:
                    type: string
                  createdAt:
                    type: string
                    format: date-time

  /users/terms/agree:
    post:
      tags: [ "用户管理" ]  # 统一为“用户管理”分组
      summary: 用户同意协议
      description: 用户登录后同意用户服务协议
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: 成功同意协议
        '401':
          description: 未授权访问

  /menus/list:
    post:
      summary: 获取侧边栏菜单列表（树形结构）
      tags: [菜单管理]
      responses:
        '200':
          description: 成功响应
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer, example: 200 }
                  message: { type: string, example: "查询成功" }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: integer }
                        parent_id: { type: integer }
                        menu_name: { type: string }
                        path: { type: string }
                        icon: { type: string }
                        menu_type: { type: string, enum: [CATALOG, MENU] }
                        order_num: { type: integer }
                        component: { type: string }
                        is_show: { type: boolean }
                        children: { type: array, items: {} } # 递归子菜单
        '500':
          description: 服务器错误
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer, example: 500 }
                  message: { type: string, example: "服务器内部错误" }
                  error: { type: string }